{"version":3,"file":"ReactNativeManualDevicePlugin.js","sourceRoot":"","sources":["ReactNativeManualDevicePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport {\n    AnalyticsPluginIdentifier, IAppInsights, IDevice, IExceptionTelemetry, eSeverityLevel\n} from \"@microsoft/applicationinsights-common\";\nimport {\n    BaseTelemetryPlugin, IAppInsightsCore, IConfigDefaults, IPlugin, IProcessTelemetryContext, IProcessTelemetryUnloadContext, ITelemetryItem,\n    ITelemetryPlugin, ITelemetryUnloadState, _eInternalMessageId, _throwInternal, _warnToConsole, arrForEach, dumpObj, eLoggingSeverity,\n    getExceptionName, onConfigChange\n} from \"@microsoft/applicationinsights-core-js\";\nimport { getGlobal, strShimUndefined } from \"@microsoft/applicationinsights-shims\";\nimport { INativeDevice, IReactNativePluginConfig } from \"./Interfaces\";\nimport { isPromiseLike, isString, ITimerHandler, objDeepFreeze, scheduleTimeout } from \"@nevware21/ts-utils\";\nimport { IDeviceInfoModule } from \"./Interfaces/IDeviceInfoModule\";\n\ndeclare var global: Window;\nconst defaultReactNativePluginConfig: IConfigDefaults<IReactNativePluginConfig> = objDeepFreeze({\n    disableDeviceCollection: false,\n    disableExceptionCollection: false,\n    uniqueIdPromiseTimeout: 5000\n});\n\nexport class ReactNativeManualDevicePlugin extends BaseTelemetryPlugin {\n\n    identifier: string = \"AppInsightsReactNativePlugin\";\n    priority: number = 140;\n    _nextPlugin?: ITelemetryPlugin;\n\n    private _setExceptionHandler: () => void;\n    private _collectDeviceInfo: () => boolean;\n\n    constructor(config?: IReactNativePluginConfig) {\n        super();\n\n        // Automatic defaults, don't set values here only set in  _initDefaults()\n        let _device: INativeDevice;\n        let _config: IReactNativePluginConfig;\n        let _analyticsPlugin: IAppInsights;\n        let _defaultHandler;\n        let _waitingForId: boolean;\n        let _waitingTimer: ITimerHandler;\n        let _waitingItems: { item: ITelemetryItem, itemCtx?: IProcessTelemetryContext }[] = null;\n        let _deviceInfoModule: IDeviceInfoModule;\n       \n        let _deviceInfoNeedsUpdate:boolean;\n        let exceptionHandlerSet:boolean;\n    \n        dynamicProto(ReactNativeManualDevicePlugin, this, (_self, _base) => {\n            _initDefaults();\n\n            _self.initialize = (\n                config?: IReactNativePluginConfig | object, // need `| object` to coerce to interface\n                core?: IAppInsightsCore,\n                extensions?: IPlugin[]\n            ) => {\n                let identifier = this.identifier;\n                if (!_self.isInitialized()) {\n                    _base.initialize(config, core, extensions);\n\n                    _self._addHook(onConfigChange(config, (details) => {\n                        let ctx = _self._getTelCtx();\n                        _config = ctx.getExtCfg<IReactNativePluginConfig>(identifier, defaultReactNativePluginConfig);\n\n                        if (!_config.disableDeviceCollection && _deviceInfoNeedsUpdate) {\n                            _deviceInfoNeedsUpdate = !_self._collectDeviceInfo();\n                        }\n            \n                        if (core && core.getPlugin) {\n                            _analyticsPlugin = core.getPlugin<any>(AnalyticsPluginIdentifier)?.plugin as IAppInsights;\n                        } else {\n                            _analyticsPlugin = null;\n                        }\n\n                        if (exceptionHandlerSet){\n                            _resetGlobalErrorHandler();\n                        }\n            \n                        if (!_config.disableExceptionCollection) {\n                            _self._setExceptionHandler();\n                            exceptionHandlerSet = true;\n                        }\n                    }));\n                }\n            };\n\n\n            _self.processTelemetry = (item: ITelemetryItem, itemCtx?: IProcessTelemetryContext) => {\n                if (!_waitingForId) {\n                    _applyDeviceContext(item);\n                    _self.processNext(item, itemCtx);\n                } else {\n                    // Make sure we have an array for the waiting items\n                    _waitingItems = _waitingItems || [];\n                    _waitingItems.push({\n                        item,\n                        itemCtx\n                    });\n                }\n            };\n        \n            _self.setDeviceInfoModule = (deviceInfoModule: IDeviceInfoModule) => {\n                // Set the configured deviceInfoModule\n                _deviceInfoModule = deviceInfoModule;\n                _deviceInfoNeedsUpdate = true;\n            };\n\n            _self.setDeviceId =_setDeviceId;\n        \n            _self.setDeviceModel = (newModel: string) => {\n                _device.model = newModel;\n            };\n        \n            _self.setDeviceType = (newType: string) => {\n                _device.deviceClass = newType;\n            };\n            \n            /**\n             * Automatically collects native device info for this device\n             */\n            _self._collectDeviceInfo = () : boolean => {\n                try {\n                    _deviceInfoModule = this.getDeviceInfoModule(_deviceInfoModule);\n                    if (!_deviceInfoModule) {\n                        return false;\n                    }\n                    _device.deviceClass = _deviceInfoModule.getDeviceType();\n                    _device.model = _deviceInfoModule.getModel();\n                    let uniqueId = _deviceInfoModule.getUniqueId(); // Installation ID support different versions which return a promise vs string\n                    if (isPromiseLike(uniqueId)) {\n                        _waitingForId = true;\n                        if (_waitingTimer) {\n                            _waitingTimer.cancel();\n                        }\n                        _waitingTimer = scheduleTimeout(() => {\n                            _waitingTimer = null;\n                            _setDeviceId(_device.id);\n                        }, 0);\n                        _waitingTimer.unref();\n                        uniqueId.then((value) => {\n                            _setDeviceId(value);\n                        }, (reason) => {\n                            _warnToConsole(_self.diagLog(), \"Failed to get device id: \" + dumpObj(reason));\n                            // Just reuse the existing id (if any)\n                            _setDeviceId(_device.id);\n                        });\n                    } else if (isString(uniqueId)) {\n                        _device.id = uniqueId;\n                    }\n                    return true;\n                } catch (e) {\n                    _warnToConsole(_self.diagLog(), \"Failed to get DeviceInfo: \" + getExceptionName(e) + \" - \" + dumpObj(e));\n                }\n            }\n\n            _self._doTeardown = (unloadCtx?: IProcessTelemetryUnloadContext, unloadState?: ITelemetryUnloadState, asyncCallback?: () => void): void | boolean => {\n                _resetGlobalErrorHandler();\n                _initDefaults();\n            };\n\n            function _initDefaults() {\n                _device = {};\n                _config = {};\n                _analyticsPlugin = null;\n                _defaultHandler = null;\n                _waitingForId = false;\n                _deviceInfoModule = null;\n                _deviceInfoNeedsUpdate = true;\n                exceptionHandlerSet = false;\n            }\n\n           \n\n            function _setDeviceId(newId: string) {\n                _device.id = newId;\n                _waitingForId = false;\n                if (_waitingTimer) {\n                    _waitingTimer.cancel();\n                }\n\n                if (!_waitingForId && _waitingItems && _waitingItems.length > 0 && _self.isInitialized()) {\n                    let items = _waitingItems;\n                    _waitingItems = null;\n                    arrForEach(items, (value) => {\n                        try {\n                            _self.processTelemetry(value.item, value.itemCtx);\n                        } catch (e) {\n                            // Just ignore\n                        }\n                    });\n                }\n            }\n\n            function _applyDeviceContext(item: ITelemetryItem) {\n                if (_device) {\n                    item.ext = item.ext || {};\n                    item.ext.device = item.ext.device || ({} as IDevice);\n                    if (isString(_device.id)) {\n                        item.ext.device.localId = _device.id;\n                    }\n                    if (isString(_device.model)) {\n                        item.ext.device.model = _device.model;\n                    }\n                    if (isString(_device.deviceClass)) {\n                        item.ext.device.deviceClass = _device.deviceClass;\n                    }\n                }\n            }\n\n            function _getGlobal(): any {\n                if (typeof global !== strShimUndefined && global) {\n                    return global as any;\n                }\n\n                return getGlobal() as any;\n            }\n\n            _self._setExceptionHandler = () => {\n                const _global = _getGlobal();\n                if (_global && _global.ErrorUtils) {\n                    // intercept react-native error handling\n                    _defaultHandler = (typeof _global.ErrorUtils.getGlobalHandler === \"function\" && _global.ErrorUtils.getGlobalHandler()) || _global.ErrorUtils._globalHandler;\n                    _global.ErrorUtils.setGlobalHandler(_trackException);\n                }\n            }\n\n            function _resetGlobalErrorHandler() {\n                const _global = _getGlobal();\n                if (_global && _global.ErrorUtils && _global.ErrorUtils.getGlobalHandler() === _trackException) {\n                    _global.ErrorUtils.setGlobalHandler(_defaultHandler || null);\n                }\n            }\n\n            // default global error handler syntax: handleError(e, isFatal)\n            function _trackException(e, isFatal) {\n                const exception: IExceptionTelemetry = { exception: e, severityLevel: eSeverityLevel.Error };\n\n                if (_analyticsPlugin) {\n                    _analyticsPlugin.trackException(exception);\n                } else {\n                    _throwInternal(_self.diagLog(),\n                        eLoggingSeverity.CRITICAL, _eInternalMessageId.TelemetryInitializerFailed, \"Analytics plugin is not available, ReactNative plugin telemetry will not be sent: \");\n                }\n\n                // call the _defaultHandler - react native also gets the error\n                if (_defaultHandler) {\n                    _defaultHandler.call(global, e, isFatal);\n                }\n            }\n\n            // Test Hooks\n            (_self as any)._config = _config;\n            (_self as any)._getDbgPlgTargets = () => {\n                return [_device, _deviceInfoModule, _config];\n            }\n        });\n    }\n\n    protected getDeviceInfoModule(_deviceInfoModule): IDeviceInfoModule {\n        if (!_deviceInfoModule) {\n            _warnToConsole(this.diagLog(), \"Failed to get DeviceInfo. Provide DeviceInfo while init or turn it off by setting disableDeviceCollection flag to true\");\n            return null;\n        }\n        return _deviceInfoModule;\n    }\n\n    public initialize(\n        config?: IReactNativePluginConfig | object, // need `| object` to coerce to interface\n        core?: IAppInsightsCore,\n        extensions?: IPlugin[]) {\n\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\n    }\n\n    public processTelemetry(env: ITelemetryItem, itemCtx?: IProcessTelemetryContext) {\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\n    }\n\n    /**\n     * Set the module that will be used during initialization when collecting device is enabled\n     * (the default), automatic collection can be disabled via the `disableDeviceCollection`\n     * config. If no `deviceInfoModule` is set and collection is enabled, an error will be thrown.\n     * @param deviceInfoModule\n     */\n    public setDeviceInfoModule(deviceInfoModule: IDeviceInfoModule) {\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\n    }\n\n    /**\n     * Manually set the deviceId, if set before initialization and automatic device info collection\n     * is enabled this value may get overwritten. If you want to keep this value disable auto\n     * collection by setting the `disableDeviceCollection` config to true.\n     * @param newId - The value to use as the device Id.\n     */\n    public setDeviceId(newId: string) {\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\n    }\n\n    /**\n     * Manually set the device model, if set before initialization and automatic device info\n     * collection is enabled this value may get overwritten. If you want to keep this value\n     * disable auto collection by setting the `disableDeviceCollection` config to true.\n     * @param newModel - The value to use as the device model.\n     */\n    public setDeviceModel(newModel: string) {\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\n    }\n\n    /**\n     * Manually set the device type (class), if set before initialization and automatic device\n     * info collection is enabled this value may get overwritten. If you want to keep this value\n     * disable auto collection by setting the `disableDeviceCollection` config to true.\n     * @param newType - The value to use as the device type\n     */\n    public setDeviceType(newType: string) {\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\n    }\n}\n"]}